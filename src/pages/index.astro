---
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import mountainRange from '../assets/img/mountain range.jpeg';

// Dynamic import of all images using Vite's glob import
const images = import.meta.glob('../assets/img/*.jpg', { eager: true });

// Create a map of existing images by number
const existingImages = new Map();
Object.entries(images).forEach(([path, module]) => {
  const imageNumber = parseInt(path.match(/(\d+)\.jpg$/)?.[1] || '0');
  existingImages.set(imageNumber, {
    src: (module as any).default,
    alt: `Portfolio image ${imageNumber}`,
    path,
    exists: true
  });
});

// Generate entries for all 76 images (existing + placeholders)
const totalImages = 76;
const imageEntries = Array.from({ length: totalImages }, (_, index) => {
  const imageNumber = index + 1; // This gives us 1-76
  
  if (existingImages.has(imageNumber)) {
    return existingImages.get(imageNumber);
  }
  
  // For missing images, cycle through existing images
  const existingImageNumbers = Array.from(existingImages.keys()).sort((a, b) => a - b);
  const cycleIndex = (imageNumber - 1) % existingImageNumbers.length;
  const sourceImageNumber = existingImageNumbers[cycleIndex];
  const sourceImage = existingImages.get(sourceImageNumber);
  
  return {
    src: sourceImage.src,
    alt: `Portfolio image ${imageNumber}`,
    path: sourceImage.path,
    exists: false, // Mark as duplicated
    original: sourceImageNumber
  };
});

// Generate random animation properties for each image
const animationProps = imageEntries.map((_, index) => ({
  delay: (index * 0.1) + Math.random() * 2, // Staggered delays
  xOffset: (Math.random() - 0.5) * 8, // Random between -4vw and 4vw
  yOffset: (Math.random() - 0.5) * 8, // Random between -4vh and 4vh
}));
---


<Layout>
  <div class="w-full relative min-h-screen background-container">
    <!-- Fixed overlay title -->
    <div class="drop-shadow-md fixed top-0 left-0 w-full h-full flex flex-col items-center justify-center text-white pointer-events-none z-10">
      <h1 class="text-7xl sm:text-8xl mb-4 tracking-tighter opacity-85">Mahraib Fatima.</h1>
    </div>

    <!-- Dynamic image grid -->
    <div class="floating-grid">
      {imageEntries.map((img, index) => (
        <div 
          class="floating-item" 
          style={`--delay: ${animationProps[index].delay}s; --x-offset: ${animationProps[index].xOffset}vw; --y-offset: ${animationProps[index].yOffset}vh;`}
        >
          <Image 
            src={img.src} 
            alt={img.alt} 
            width={400} 
            height={400} 
            class="floating-img"
            loading="lazy"
          />
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  /* Background Image */
  .background-container {
    background-image: url('${mountainRange.src}');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
  }

  /* Add overlay for better text readability */
  .background-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(11, 7, 4, 0.3);
    z-index: 0;
  }

  /* Floating Grid Layout */
  .floating-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    padding: 2rem;
    position: relative;
    z-index: 2;
  }

  .floating-item {
    position: relative;
    will-change: transform;
    aspect-ratio: 1/1;
  }

  .floating-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.5s ease-out;
  }

  /* Floating Animation */
  @keyframes float {
    0%, 100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(var(--x-offset), var(--y-offset));
    }
  }

  .floating-item {
    animation: float 6s ease-in-out infinite;
    animation-delay: var(--delay);
  }

  /* Hover effects for better interactivity */
  .floating-item:hover .floating-img {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  /* Make text unselectable and overlay properly */
  .drop-shadow-md {
    user-select: none;
    z-index: 20;
  }

  /* Hide scrollbar */
  ::-webkit-scrollbar {
    display: none;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .floating-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 0.5rem;
      padding: 1rem;
    }
    
    .drop-shadow-md h1 {
      font-size: 3rem;
    }
  }
</style>